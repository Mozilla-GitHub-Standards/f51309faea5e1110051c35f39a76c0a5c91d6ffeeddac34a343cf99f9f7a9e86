BMM API documentation

All APIs are accessed under paths starting with /api/.

= MozPool =

This is the central, public interface to request, return, and operate on
devices.

== Devices ==

/api/device/list/
* GET returns a JSON response body whose "devices" key
  contains an array of the names of devices known to the system.
  Device names can be passed as the id in the following device APIs.

/api/device/list?details=1
* GET returns a JSON response body whose "devices" key
  contains an array of objects, each representing a single device.
  The objects have keys id, name, fqdn, invenetory_id, mac_address,
  imaging_server, and relay_info.

/api/device/{id}/status/
* GET returns a JSON response body whose "status" key contains
  a short string describing the last-known status of the device,
  and whose "log" key contains an array of recent log entries
  for the device.

/api/device/{id}/request/
* POST requests the given device. {id} may be "any" to let MozPool choose an
  unassigned device. The body must be a JSON object with the keys "requester",
  "image", and "duration". The value for "requester" takes an email address,
  for human users, or a hostname, for machine users. "image" must be the
  name of an image (see bootimage API below). "duration" must be a value, in
  seconds, of the duration of the request (which can be renewed; see below).
  If successful, returns 200 OK with a JSON object with keys "device"
  and "request". The value of "request" is a partial URL for the request
  object and should be used in request calls, as detailed below. If the
  requested device is already assigned, or if no device could be found if
  "any" was requested, returns 409 Conflict.

== Requests ==

/api/request/list/
* GET returns a JSON response body whose "requests" key contains an array of
  objects representing all current requests. The objects have the keys id,
  device_id, assignee, expires, and status.

Once a request is fulfilled using the "request" API above, all further
actions related to the requested device should be done using that URL, which
includes up to "/api/request/{id}/". This ensures that only one server
handles any given request. Attempts to access that request ID on a different
server will result in a 302 Found redirection to the correct server.

The full paths of request APIs are presented below for clarity.

Note that a request will be automatically terminated once it expires. The
"renew" call should be used to extend the request lifetime.

/api/request/{id}/details/
* GET returns a JSON response body whose "request" key contains an object
  representing the given request with the keys id, device_id, assignee, 
  expires, and status.  The expires field is given as an ISO-formatted time.

/api/request/{id}/renew/
* POST requests that the request's lifetime be updated. The request body
  should be a JSON object with the key "duration", the value of which is the
  *new* remaining time, in seconds, of the request. Returns 204 No Content.

/api/request/{id}/return/
* POST returns the device to the pool and deletes the request. Returns
  204 No Content.


= LifeGuard =

These are requests to a particular LifeGuard server to start low-level BMM
operations. These should *not* be called directly by anything other than
a MozPool server or the device itself.

/api/device/{id}/config/
* GET returns a JSON response body whose "config" key contains
  an object describing configuration parameters for the current
  boot of the device. The configuration parameters are specific
  to each individual boot image and are simply implemented as a way
  to provide extra data to the image on boot. The image is intended
  to GET this during the boot process.

/api/device/{id}/setstate/
* POST to conditionally set the state of a device.  The POST body is a JSON
  object with keys `old_state` and `new_state`.  The state is set to
  `new_state` if and only if the current state is `old_state`.

  204 No Content is returned as the response status.

/api/device/{id}/boot/{image}/
* POST to indicate that this device should be booted with this image.
  Optional request body should be JSON that is stored as the configuration
  parameters for the boot.
  204 No Content is returned as the response status.

/api/device/{id}/bootcomplete/
* POST to indicate that the boot of this device has completed and
  the PXE boot data can be removed. No request body is required.

= Black Mobile Magic =

Black Mobile Magic handles the hardware directly: power control and network
boot configuration.

== Operations ==

/api/device/{id}/power-cycle/
* POST to initiate a power-cycle this device.  The POST body is a JSON object,
  with optional keys `pxe_config` and `boot_config`.  If `pxe_config` is
  specified, then the device is configured to boot with that PXE config;
  otherwise, the device boots from its internal storage.  If `boot_config` is
  supplied (as a string), it is stored for later use by the device via
  `/api/device/{id}/config/`.

/api/device/{id}/clear-pxe/
* POST to clear the PXE configuration for the device.  Call this after a
  `power_cycle` operation with a `pxe_config` argument has been successful, so
  that any subsequent device-initiated reboots will not PXE boot.

== PXE Configs ==

/api/pxe_configs/list/
* GET returns a JSON response body whose "pxe_configs" key
  contains an array of the names of boot images known to the system.
  Bootimage names can be passed as the id in the following bootimage APIs.

/api/pxe_configs/{id}/details/
* GET returns a JSON response body whose "details" key contains
  an object that provides information about this PXE config.
  The keys of this object are: "name", "version", "description" and
  "content".

